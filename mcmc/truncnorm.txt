Turnout: probit model for binary data via truncated Normal sampling

Voter turnout is coded as a binary indicator (y =1 if voted, 0 otherwise) and related to covariates via a probit model.  The data comprise a random 3,000 observation subset of a much larger data set analyzed by Jonathan Nagler.

Note the use of the I(,) construct to give truncated Normal sampling for the latent variable, ystar.  The variance of the latent variable is set to 1.0, which is an arbitrary but standard identification constraint in binary response models.
Operationalizing a probit model this way follows the approach of James Albert and Siddhartha Chib, 1993, ‘‘Bayesian Analysis of Binary and Polychotomous Response Data’’ Journal of the American Statistical Association, 88:669--79.

WinBUGS is much happier if it has user-supplied start values for the stochastic node, ystar, rather than generating initial values itself (this can take a very long time).  Also, this particular operationalization rules out missing data on the observed binary responses, y, since it is the values of y that direct WinBUGS as to which set of truncation limits to use.  An alternative approach is to supply these truncation limits as the "data" instead of supplyng y itself; for missing data simply set lower to an arbitrarily large negative number (e.g., -50) and upper to an arbitrarily large positive number (e.g., 50).


model{
  for (i in 1:N){                        ## loop over observations
     mu[i] <- beta[1]
            + beta[2]*educ[i]
            + beta[3]*(educ[i]*educ[i])      
            + beta[4]*age[i]
            + beta[5]*(age[i]*age[i])
            + beta[6]*south[i]
            + beta[7]*govelec[i]
            + beta[8]*closing[i] 
            + beta[9]*(closing[i]*educ[i]) 
            + beta[10]*(educ[i]*educ[i]*closing[i]);

    ## truncated normal sampling, note double-subscript trick to
    ## select appropriate truncation bounds
    ystar[i] ~ dnorm(mu[i],1)I(lo[y[i]+1],up[y[i]+1]);

    ## not necc for model fitting
    probit(p[i]) <- mu[i];               ## probs, as probit link
    llh[i] <- y[i]*log(p[i]) + (1-y[i])*log(1-p[i]);
    
  }
  ## truncation bounds
  lo[1] <- -50; lo[2] <- 0;     ## i.e., ystar | y=0 ~ N(xb,1)I(-50,0)
  up[1] <-   0; up[2] <- 50;    ## i.e., ystar | y=1 ~ N(xb,1)I(0,50) 
  
  sumllh <- sum(llh[ ]);             ## sum log-likelihood contributions
  
  ## priors
  beta[1:10] ~ dmnorm(b0[ ] , B[ , ]) ;  ## multivariate Normal prior
}
